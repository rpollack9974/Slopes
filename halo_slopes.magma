function slopes_on_rim(p,comp)
    K := CyclotomicField((p-1)*p);
    G := DirichletGroup(p^2,K);
    psi := G.1;
    chi := psi^(p-1);
    OK := RingOfIntegers(K);
    print "Factoring ",p;    
    pp := Factorization(p*OK)[1][1];
    e := RamificationDegree(pp);
    omega := psi^p;
    print "Finding omega";
    r := 0;
    vals := [];
    for a in [1..p-1] do
        vals := vals cat [Valuation(omega(a)^r-a,pp)];
    end for;
    mv := Min(vals);
    while mv eq 0 do
        vals := [];    
        r := r+1;
        for a in [1..p-1] do
            vals := vals cat [Valuation(omega(a)^r-a,pp)];
        end for;
        mv := Min(vals);
    end while;
	omega := omega^r;
	
    seeds:= [];
	for j in [0..(p-3)/2] do
        print "Computing the ",j,"-th modular symbol space";
        M := CuspidalSubspace(ModularSymbols(chi*omega^(2*j),2,1));
        print "---computing Hecke";
        f := HeckePolynomial(M,p);
        f := Reverse(f);
        NP := NewtonPolygon(f,pp);
        seeds := seeds cat [slopes_of_NP(NP)];
        print slopes_of_NP(NP);
    end for;

    all_slopes := [];
    for comp in [0..p-2] do
        if comp mod 2 eq 0 then
            for a in [1..(p-1)/2] do
                slopes := slopes cat [a*(p-1)]; //eisenstein stuff
            end for;
            for j in [0..(p-3)/2] do
                i := (comp-2*j) mod (p-1);
                if i eq 0 then
                    i := p-1;
                i := i div 2;
                for s in [1..#seeds[i]] do
                    slopes := slopes cat [s+j];
                end for;
            end for;
            all_slopes := all_slopes cat [slopes];
        end if;
    end for;

    return Sort(all_slopes);
end function;
